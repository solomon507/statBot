{"version":3,"sources":["../src/index.js"],"names":["Discord","logger","dotenv","steem","http","config","triggerBotKey","client","Client","on","info","user","tag","msg","content","substring","args","split","cmd","splice","console","log","message","reply","api","getAccounts","err","results","map","result","reputation","formatter","accountWorth","estimateAccountValue","then","name","JSON","parse","json_metadata","profile","about","worth","catch","query","querying","Posts","Votes","PendingPayouts","Comments","steemPrice","sbdPrice","get","low","res","data","Low","high","High","ratio","channel","fetchMessage","delete","author","error","login","process","env","DISCORD_TOKEN","createServer","request","response","writeHead","contentType","end","listen","PORT"],"mappings":"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","file":"index.js","sourcesContent":["import * as Discord from 'discord.js';\nimport * as logger from 'winston';\nimport * as dotenv from 'dotenv';\nimport * as steem from 'steem';\nimport * as http from 'http';\nimport axios from 'axios';\n\nimport 'babel-polyfill';\n\ndotenv.config();\n\nimport { executeQuery } from './db';\nimport { searchTag } from './sql';\n\n// setting\nconst triggerBotKey = '!';\n\n// start client\nconst client = new Discord.Client();\n\nclient.on('ready', () => {\n    logger.info(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on('message', msg => {\n    logger.info(msg.content);\n\n    if (msg.content.substring(0, 1) == triggerBotKey) {\n        var args = msg.content.substring(1).split(' ');\n        var cmd = args[0];\n        args = args.splice(1);\n        // CONSOLE LOGGING\n        logger.info(`CMD: ${cmd}`);\n        logger.info(`ARGS: ${args}`);\n        console.log(args);\n        // END\n        let message;\n        switch (cmd) {\n            case 'help':\n                message = `statBot HELP\\n\n                Type \\`!ping\\` to get bot reply 'pong'\\n\n                Type \\`!user <steem_name>\\` to get details of that person (without @)\\n\n                Type \\`!ratio \\` to get steem to sbd ratio from Bittrex\\n\n                Type \\`!tag <tag_name>\\` to get details on votes, comments, topics and pending payout of that certain tags in past 7 days\\n\n                Type \\`!delete <message_id>\\` to delete a message\n                `;\n                msg.reply(message);\n                break;\n            case 'user':\n                steem.api.getAccounts(args, function(err, results) {\n                    if (!!results[0]) {\n                        results.map(result => {\n                            if (!!result) {\n                                console.log(result);\n                                let reputation = steem.formatter.reputation(\n                                    result.reputation\n                                );\n                                let accountWorth = steem.formatter.estimateAccountValue(\n                                    result\n                                );\n\n                                accountWorth\n                                    .then(worth => {\n                                        message = `@${result.name} says \"${\n                                            JSON.parse(result.json_metadata)\n                                                .profile.about\n                                        }\"\n                                and reputation: ${reputation} 🔰\n                                and account worth: $${worth} 💰\n                                `;\n                                        msg.reply(message);\n                                    })\n                                    .catch(err => {\n                                        console.log(err);\n                                    });\n                            } else {\n                                msg.reply('User not found');\n                            }\n                        });\n                    } else {\n                        msg.reply('User not found');\n                    }\n                });\n                break;\n            case 'ping':\n                message = 'Pong!';\n                msg.reply(message);\n                break;\n            case 'tag':\n                msg.reply('Connecting to database....');\n                const query = searchTag(args[0]);\n                async function querying(query, tag) {\n                    let result = await executeQuery(query);\n                    console.log(result);\n                    result === 'ERROR'\n                        ? msg.reply('ERROR ON QUERY-ING')\n                        : msg.reply(\n                              `There is\n                               ${result[0].Posts} posts 📘,\n                               ${result[0].Votes} votes 👍,\n                               $${result[0].PendingPayouts} steem 💵,\n                               ${result[0].Comments} comments 💬,\n                               on #${tag} in the past 7 days`\n                          );\n                }\n                querying(query, args);\n                break;\n            case 'ratio':\n                let steemPrice;\n                let sbdPrice;\n                axios\n                    .get(\n                        'https://bittrex.com/api/v1.1/public/getmarketsummary?market=btc-steem'\n                    )\n                    .then(res => {\n                        steemPrice = {\n                            low: res.data.result[0].Low,\n                            high: res.data.result[0].High\n                        };\n                        return axios.get(\n                            'https://bittrex.com/api/v1.1/public/getmarketsummary?market=btc-sbd'\n                        );\n                    })\n                    .then(res => {\n                        sbdPrice = {\n                            low: res.data.result[0].Low,\n                            high: res.data.result[0].High\n                        };\n                        console.log(steemPrice);\n                        console.log(sbdPrice);\n                        let ratio = {\n                            low: steemPrice.low / sbdPrice.low,\n                            high: steemPrice.high / sbdPrice.high\n                        };\n                        console.log(ratio);\n                        msg.reply(\n                            `ratio from bittrex: ${ratio.low} <-> ${\n                                ratio.high\n                            } steem/sbd`\n                        );\n                    });\n                break;\n            case 'delete':\n                msg.channel\n                    .fetchMessage(args[0])\n                    .then(message => {\n                        message\n                            .delete()\n                            .then(msg =>\n                                msg.reply(`Deleted message from ${msg.author}`)\n                            )\n                            .catch(console.error);\n                    })\n                    .catch(console.error);\n                break;\n            default:\n                message = '`!help` to get started';\n                msg.reply(message);\n                break;\n        }\n    }\n});\nclient.login(process.env.DISCORD_TOKEN);\nhttp\n    .createServer(function(request, response) {\n        response.writeHead(200, { 'Content-Type': contentType });\n        response.end(content, 'utf-8');\n    })\n    .listen(process.env.PORT || 5000);\n"]}